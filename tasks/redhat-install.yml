
# validation

- name: assert all vars are set
  assert: 
    that:
      - item is defined
      - item | length > 0
    quiet: true
  loop:
  - postgresql_version
  - postgresql_port
  - postgresql_user
  - postgresql_password
  - postgresql_group
  - postgresql_service_name
  - postgresql_packages
  - postgresql_yum_repository_baseurl
  - postgresql_yum_repository_gpgkey
  - postgresql_data_directory
  - postgresql_bin_directory
  - postgresql_conf


# required dependencies

- name: Install epel-release
  yum:
    name: epel-release
    state: present
    lock_timeout: 180
  become: yes

- name: Add PostgreSQL repository
  yum_repository:
     name: postgresql
     description: postgresql yum repo
     baseurl: "{{ postgresql_yum_repository_baseurl }}"
     gpgkey: "{{ postgresql_yum_repository_gpgkey }}"
  register: add_postgres_repo
  become: yes

- name: yum-clean-metadata
  command: yum clean metadata
  args:
    warn: no
  when: add_postgres_repo.changed
  become: yes

- name: upate yum repolist
  command: yum repolist
  args:
    warn: no
  changed_when: no
  become: yes

- name: Make sure the dependencies are installed
  yum:
   name: "{{ postgresql_dependencies }}"
   state: present
   lock_timeout: 180
  become: yes

# disable selinux and firewalld

- name: disable selinux
  selinux:
    state: disabled
  become: yes
   
- name: stop and disable firewall     ## need to discuss on disabling firewall service
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  become: yes
  ignore_errors: yes
  with_items:
    - firewalld

# install postgresql

- name: Install PostgreSQL
  yum:
    name: "{{ postgresql_packages }}"
    state: present
    lock_timeout: 180
  become: yes

# initialize postgres server

- name: Make sure the postgres data directory exists
  file:
    path: "{{postgresql_data_directory}}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    state: directory
    mode: 0700
  become: yes

- name: Check whether the postgres data directory is initialized
  stat:
    path: "{{ postgresql_data_directory }}/PG_VERSION"
  register: pgdata_dir_initialized
  become: yes

- name: Initialize the database
  command: "{{ postgresql_bin_directory }}/initdb -D {{ postgresql_data_directory }}"
  become: yes
  become_user: "{{ postgresql_user }}"
  when: not pgdata_dir_initialized.stat.exists

# configure installed 

- name: copy pg_hba.conf template
  template:
    src: pg_hba.conf.j2
    dest: "{{ postgresql_data_directory }}/pg_hba.conf"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0644
  become: yes
  register: postgresql_configuration_1

- name: uncomment postgresql properties
  replace:
    path: "{{ postgresql_data_directory }}/postgresql.conf"
    regexp: "^#({{ item.key }})"
    replace: '\1'
  with_dict: "{{ postgresql_conf }}"
  become: yes

- name: update postgresql.conf file
  lineinfile:
    path: "{{ postgresql_data_directory }}/postgresql.conf"
    line: "{{ item.key }} = {{ item.value }}"
    regexp: "^{{ item.key | replace('.', '\\.') }} ="
  with_dict: "{{ postgresql_conf }}"
  become: yes
  register: postgresql_configuration_2

- name: Ensure the pid directory for PostgreSQL exists
  file:
    name: "{{ postgresql_pid_directory }}"
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: u=rwX,g=rwXs,o=rx
  become: yes
  notify: restart postgresql

# stop old postgres service

- name: check old posgtres services
  shell: "systemctl list-unit-files --type=service | grep postgresql | grep -v {{ postgresql_service_name }} | awk '{print $1}'"
  register: old_services
  become: yes
  changed_when: no

- name: stop old postgresql services
  service:
    name: "{{ item }}"
    state: stopped
    enabled: no
  with_items: "{{ old_services.stdout_lines }}"
  become: yes
  when: old_services.stdout_lines | length > 0

# reload postgres config

- name: Reload all conf files
  service:
    name: "{{ postgresql_service_name }}"
    state: reloaded
  become: yes
  when: postgresql_configuration_1.changed or postgresql_configuration_2.changed

# update postgres password

- name: Ensure PostgreSQL is started and enabled on boot.
  service:
    name: "{{ postgresql_service_name }}"
    state: "started"
    enabled: yes
  become: yes

- name: Update the password of the postgres user
  command: psql -U postgres -d postgres -c "alter user postgres with password '{{ postgresql_password }}';"
  become: yes
  become_user: "{{ postgresql_user }}"
  changed_when: no


# expose role output

- name: sanitize role name
  set_fact:
    sanitize_role_name: "{{ role_name | replace('-', '_') | regex_replace('([^A-Za-z0-9_])', '') | trim }}"

- name: expose role output
  set_fact:
    "{{ sanitize_role_name }}":
      postgresql_version: "{{ postgresql_version }}"
      postgresql_host: "{{ ansible_default_ipv4.address }}"
      postgresql_user: "{{ postgresql_user }}"
      postgresql_password: "{{ postgresql_password }}"
      postgresql_port: "{{ postgresql_port }}"
      postgresql_service_name: "{{ postgresql_service_name }}"
